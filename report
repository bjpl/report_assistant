#!/bin/bash
# Report CLI - Unified command interface for report management
# Usage: report [command] [options]

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="/mnt/c/Users/brand/Development/Project_Workspace/active-development"
REPORT_ASSISTANT="$PROJECT_ROOT/report_assistant"
PYTHON="${PYTHON:-python3}"
TODAY=$(date +%Y-%m-%d)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help function
show_help() {
    cat << EOF
Report CLI - Unified Report Management Tool
==========================================

USAGE:
    report [command] [options]

QUICK COMMANDS:
    report today            Generate both GMS and progress reports
    report gms              Generate GMS startup report
    report progress         Generate daily progress report
    report commit           Commit today's reports
    report status           Show current status

PROJECT COMMANDS:
    report init <project>   Initialize project with report structure
    report audit <project>  Audit specific project
    report update <project> Update project to latest format
    report backfill <project> Generate reports from git history

BULK COMMANDS:
    report audit-all        Audit all projects
    report sync-all         Sync reports across projects
    report validate-all     Validate all reports
    report generate-missing Generate all missing reports

TEMPLATE COMMANDS:
    report template list    List available templates
    report template apply <type> <project> Apply template
    report template validate Check template consistency

MAINTENANCE:
    report backup           Backup all reports
    report restore <date>   Restore from backup
    report clean            Clean temporary files
    report stats            Show statistics

SWARM COMMANDS:
    report swarm audit      Run full swarm audit
    report swarm align      Align all reports
    report swarm deploy     Deploy report agents

OPTIONS:
    -h, --help             Show this help
    -v, --verbose          Verbose output
    -q, --quiet            Quiet mode
    -f, --force            Force operation

EXAMPLES:
    report today           # Generate today's reports
    report init my-project # Initialize new project
    report audit video_gen # Audit specific project
    report swarm deploy    # Deploy swarm for alignment

EOF
}

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# Command functions
cmd_today() {
    log_info "Generating reports for $TODAY..."
    cmd_gms
    cmd_progress
    log_success "Today's reports ready!"
}

cmd_gms() {
    local report_dir="$REPORT_ASSISTANT/daily_dev_startup_reports"
    local report_file="$report_dir/${TODAY}_startup_report.md"

    mkdir -p "$report_dir"

    if [[ -f "$report_file" ]]; then
        log_warn "GMS report already exists for today"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && return
    fi

    cp "$REPORT_ASSISTANT/docs/templates/gms_startup_report_template.md" "$report_file"
    log_success "GMS report created: $report_file"

    # Auto-fill with claude-flow if available
    if command -v npx &> /dev/null && npx claude-flow --version &> /dev/null 2>&1; then
        log_info "Running GMS audit with claude-flow..."
        npx claude-flow sparc run gms-audit "Fill GMS report for $TODAY"
    fi
}

cmd_progress() {
    local report_dir="$REPORT_ASSISTANT/daily_reports"
    local report_file="$report_dir/${TODAY}.md"

    mkdir -p "$report_dir"

    if [[ -f "$report_file" ]]; then
        log_warn "Progress report already exists for today"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && return
    fi

    cp "$REPORT_ASSISTANT/docs/templates/daily_report_template.md" "$report_file"
    log_success "Progress report created: $report_file"
}

cmd_commit() {
    log_info "Committing reports..."
    cd "$REPORT_ASSISTANT"

    git add daily_reports/ daily_dev_startup_reports/ 2>/dev/null || true

    if git diff --cached --quiet; then
        log_warn "No changes to commit"
    else
        git commit -m "docs: Add reports for $TODAY"
        log_success "Reports committed"
    fi
}

cmd_status() {
    log_info "Report Status Overview"
    echo "======================="
    echo
    echo "Today: $TODAY"
    echo

    # Check today's reports
    echo "Today's Reports:"
    if [[ -f "$REPORT_ASSISTANT/daily_dev_startup_reports/${TODAY}_startup_report.md" ]]; then
        echo "  ✓ GMS startup report exists"
    else
        echo "  ✗ GMS startup report missing"
    fi

    if [[ -f "$REPORT_ASSISTANT/daily_reports/${TODAY}.md" ]]; then
        echo "  ✓ Daily progress report exists"
    else
        echo "  ✗ Daily progress report missing"
    fi

    echo
    echo "Statistics:"
    local total_daily=$(find "$PROJECT_ROOT"/*/daily_reports -name "*.md" 2>/dev/null | wc -l)
    local total_gms=$(find "$PROJECT_ROOT"/*/daily_dev_startup_reports -name "*.md" 2>/dev/null | wc -l)
    local total_projects=$(ls -d "$PROJECT_ROOT"/*/ 2>/dev/null | wc -l)

    echo "  Total daily reports:  $total_daily"
    echo "  Total GMS reports:    $total_gms"
    echo "  Total projects:       $total_projects"

    echo
    echo "Recent Activity (last 5):"
    find "$PROJECT_ROOT"/*/daily_reports -name "*.md" -mtime -7 2>/dev/null | tail -5 | while read -r file; do
        echo "  - $(basename "$(dirname "$(dirname "$file")")")/$(basename "$file")"
    done
}

cmd_init() {
    local project="$1"

    if [[ -z "$project" ]]; then
        log_error "Project name required"
        echo "Usage: report init <project>"
        exit 1
    fi

    log_info "Initializing project: $project"

    local project_dir="$PROJECT_ROOT/$project"
    mkdir -p "$project_dir/daily_reports"
    mkdir -p "$project_dir/daily_dev_startup_reports"
    mkdir -p "$project_dir/docs/templates"

    # Copy templates
    cp "$REPORT_ASSISTANT/docs/templates/"*.md "$project_dir/docs/templates/" 2>/dev/null || true

    log_success "Project $project initialized with report structure"
}

cmd_audit() {
    local project="$1"

    if [[ -z "$project" ]]; then
        cmd_audit_all
        return
    fi

    log_info "Auditing project: $project"
    $PYTHON "$REPORT_ASSISTANT/scripts/report_management/audit_reports.py" --project "$project"
}

cmd_audit_all() {
    log_info "Auditing all projects..."
    $PYTHON "$REPORT_ASSISTANT/scripts/report_management/audit_reports.py"
    log_success "Audit complete - see docs/report_type_audit_matrix.md"
}

cmd_swarm() {
    local subcmd="$1"

    case "$subcmd" in
        audit)
            log_info "Deploying swarm for comprehensive audit..."
            npx claude-flow swarm deploy audit-all "Audit all project reports"
            ;;
        align)
            log_info "Deploying swarm for report alignment..."
            npx claude-flow swarm deploy align-reports "Align all reports to standard format"
            ;;
        deploy)
            log_info "Deploying report management swarm..."
            npx claude-flow swarm init mesh --max-agents 5
            npx claude-flow task orchestrate "Report management and alignment"
            ;;
        *)
            log_error "Unknown swarm command: $subcmd"
            echo "Available: audit, align, deploy"
            exit 1
            ;;
    esac
}

cmd_backup() {
    local backup_dir="$REPORT_ASSISTANT/backups"
    mkdir -p "$backup_dir"

    local backup_file="$backup_dir/reports_backup_${TODAY}.tar.gz"

    log_info "Creating backup..."
    tar -czf "$backup_file" \
        -C "$REPORT_ASSISTANT" \
        daily_reports \
        daily_dev_startup_reports \
        docs/templates

    log_success "Backup created: $backup_file"
}

cmd_stats() {
    log_info "Report Statistics"
    echo "=================="

    # Function to count reports by type
    count_reports() {
        local dir="$1"
        local pattern="$2"
        find "$PROJECT_ROOT" -path "*/$dir/$pattern" 2>/dev/null | wc -l
    }

    echo
    echo "Report Counts:"
    echo "  Daily Progress Reports: $(count_reports "daily_reports" "*.md")"
    echo "  GMS Startup Reports:    $(count_reports "daily_dev_startup_reports" "*_startup_report.md")"
    echo

    echo "Projects with Reports:"
    for project in "$PROJECT_ROOT"/*; do
        if [[ -d "$project/daily_reports" ]] || [[ -d "$project/daily_dev_startup_reports" ]]; then
            local name=$(basename "$project")
            local daily_count=$(find "$project/daily_reports" -name "*.md" 2>/dev/null | wc -l)
            local gms_count=$(find "$project/daily_dev_startup_reports" -name "*.md" 2>/dev/null | wc -l)
            printf "  %-30s Daily: %3d  GMS: %3d\n" "$name" "$daily_count" "$gms_count"
        fi
    done

    echo
    echo "Recent Activity (last 7 days):"
    find "$PROJECT_ROOT" \( -path "*/daily_reports/*.md" -o -path "*/daily_dev_startup_reports/*.md" \) \
        -mtime -7 2>/dev/null | head -10 | while read -r file; do
        local project=$(basename "$(dirname "$(dirname "$file")")")
        local report=$(basename "$file")
        echo "  $project: $report"
    done
}

# Main command dispatcher
main() {
    local command="$1"
    shift || true

    case "$command" in
        today|t)
            cmd_today "$@"
            ;;
        gms|g)
            cmd_gms "$@"
            ;;
        progress|p)
            cmd_progress "$@"
            ;;
        commit|c)
            cmd_commit "$@"
            ;;
        status|s)
            cmd_status "$@"
            ;;
        init|i)
            cmd_init "$@"
            ;;
        audit|a)
            cmd_audit "$@"
            ;;
        audit-all)
            cmd_audit_all "$@"
            ;;
        swarm)
            cmd_swarm "$@"
            ;;
        backup|b)
            cmd_backup "$@"
            ;;
        stats)
            cmd_stats "$@"
            ;;
        help|-h|--help|"")
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo "Run 'report help' for usage"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"